project/
├── CMakeLists.txt
├── cpu.v
├── sim_main.cpp


Make file:

cmake_minimum_required(VERSION 3.15)
project(cpu_sim)

# Set Verilator path (adjust if needed)
find_program(VERILATOR_EXECUTABLE verilator)

if(NOT VERILATOR_EXECUTABLE)
    message(FATAL_ERROR "Verilator not found in PATH")
endif()

# Verilate the design
add_custom_command(
    OUTPUT Vcpu__ALL.cpp
    COMMAND ${VERILATOR_EXECUTABLE}
            --cc cpu.v
            --exe sim_main.cpp
            --build
            -o cpu_sim
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    DEPENDS cpu.v sim_main.cpp
    COMMENT "Running Verilator"
)

add_custom_target(cpu_sim ALL
    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/cpu_sim
)


Plain Verilog ( cpu.v ):

module cpu (
    input clk,
    input reset,
    output reg [31:0] addr,
    output reg [63:0] data_out,
    input      [63:0] data_in
);
    reg [63:0] gpr[0:15];  // General-purpose registers
    reg [3:0] gpr_index;
    reg [63:0] gpr_write_data;
    reg        gpr_write_en;
    wire [63:0] gpr_out;

    assign gpr_out = gpr[gpr_index];



    always @(posedge clk) begin
    if (gpr_write_en)
        gpr[gpr_index] <= gpr_write_data;
    end

    always @(posedge clk) begin
        if (reset) begin
            gpr[0] <= 0;
        end else begin
            gpr[0] <= gpr[0] + 1;
        end
    end

    // Output a register to see it's changing
    always @(*) begin
        addr = gpr[0][31:0];
        data_out = gpr[0];
    end





endmodule


Verilator Wrapper ( sim_main.cpp )

#include "Vcpu.h"
#include "verilated.h"
#include <iostream>

Vcpu* top;

void reset_cpu() {
    top->reset = 1;
    top->clk = 0; top->eval();
    top->clk = 1; top->eval();
    top->clk = 0; top->eval();
    top->reset = 0;
}

void step_cpu() {
    top->clk = 0; top->eval();
    top->clk = 1; top->eval();
    top->clk = 0; top->eval();
}

void write_gpr(int index, uint64_t value) {
    top->gpr_index = index;
    top->gpr_write_data = value;
    top->gpr_write_en = 1;
    step_cpu();  // clock the write in
    top->gpr_write_en = 0;
}

uint64_t read_gpr(int index) {
    top->gpr_index = index;
    top->eval();  // propagate combinational logic
    return top->gpr_out;
}


int main(int argc, char** argv) {
    Verilated::commandArgs(argc, argv);
    top = new Vcpu;

    reset_cpu();
    for (int i = 0; i < 5; i++) {
        step_cpu();
        std::cout << "Step " << i << ": GPR0 = 0x" << std::hex << top->data_out << std::endl;
    }

    delete top;
    return 0;
}

Build and run:

mkdir build && cd build
cmake ..
cmake --build .
./cpu_sim



====================

More complex example with hierarchy:

module cpu (
    input clk,
    input reset,
    ...
);

    regfile gprs (
        .clk(clk),
        ...
    );

    regfile ctrl_regs (
        .clk(clk),
        ...
    );

    status_reg status (
        ...
    );

endmodule

module regfile (
    input clk,
    input [3:0] index,
    input write_en,
    input [63:0] data_in,
    output [63:0] data_out
);
    reg [63:0] r[15:0];

    assign data_out = r[index];

    always @(posedge clk) begin
        if (write_en)
            r[index] <= data_in;
    end
endmodule


Access from c++

module:

top->gprs->index       // gpr regfile
top->ctrl_regs->index  // control regfile
top->status->ready     // a signal inside status_reg

wire:

top->gprs->data_out
top->ctrl_regs->data_out

Example: 

void write_gpr(Vregfile* rf, int index, uint64_t value) {
    rf->index = index;
    rf->data_in = value;
    rf->write_en = 1;
    step_cpu();        // toggle clk to latch the write
    rf->write_en = 0;
}

usage:

write_gpr(top->gprs, 3, 0xdeadbeef);
write_gpr(top->ctrl_regs, 2, 0x12345678);

for reads:

uint64_t read_gpr(Vregfile* rf, int index) {
    rf->index = index;
    top->eval();  // for comb output
    return rf->data_out;
}

==========================

to Tumor the hierarchy: 

verilator --cc cpu.v --dump-tree


